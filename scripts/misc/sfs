#!/bin/sh

# This script sets up and manages sshfs connections. It sets up the required
# directories and logs, tests the ssh connections, starts and stops the sshfs
# connections, and handles the provided arguments.


# Set up variables
MOUNT_LOCATION="${HOME}/.local/mnt"
ARGUMENTS="${@}"
LOG_FILE=${MOUNT_LOCATION}/known_dir_log

# Set up functions

# Test ssh connection
test_ssh_connection() {
  UPDWN=$(ssh -qo ConnectTimeout=7 "${1}" exit ; echo ${?})
  [ "${UPDWN}" = "1" -o "0" ] && return 0 || return 1
}

# Start up sshfs
start_sshfs() {
  # Loop through all the known directories
  for ADDRESS in $(cat "${LOG_FILE}") ; do
    # Test the ssh connection
    test_ssh_connection "${ADDRESS}" \
    # If successful, mount the directory
    && sshfs -o transform_symlinks "${ADDRESS}:/" "${MOUNT_LOCATION}/${ADDRESS}" \
    # Otherwise, print an error message
    || echo "${ADDRESS} timed-out connecting" >&2
  done
}

# Make new dirs for sshfs
create_sshfs_dir() {
  # Loop through all the provided arguments
  for DIR in ${ARGUMENTS} ; do
    # Check if the directory is already in the log file
    SNADD=$(grep "^${DIR}$" "${LOG_FILE}" 2> /dev/null)
    # If the directory is not in the log file
    if [ -z "${SNADD}" ] ; then
      # Test the ssh connection
      test_ssh_connection "${DIR}" \
      # If successful, create the directory and add it to the log file
      && mkdir "${MOUNT_LOCATION}/${DIR}" \
      && echo "${DIR}" >> "${LOG_FILE}" \
      # Otherwise, print an error message
      || echo "${DIR} timed-out so was not added" >&2
    else
      # If the directory is already in the log file, print an error message
      echo "${DIR} is already in log" >&2
    fi
  done
}

# Kill old processes
kill_sshfs() {
  # Loop through all the known directories
  for KILL in $(cat "${LOG_FILE}") ; do
    # Kill the sshfs processes and unmount the directories
    $( 
      pkill -9 sshfs
      fusermount -uzq "${MOUNT_LOCATION}/${KILL}" 
    ) && DIDSMTHN="y"
  done
}

# Run everything
if mkdir "${MOUNT_LOCATION}" 2> /dev/null ; then
  create_sshfs_dir && start_sshfs && exit
elif [ -z "${1}" ] ; then
  kill_sshfs ; start_sshfs && exit
elif [ "${1}" != "-k" ] ; then
  kill_sshfs ; create_sshfs_dir && start_sshfs && exit
fi

kill_sshfs && exit ; [ "${DIDSMTHN}" != "y" ] && echo "Nothing to do"

